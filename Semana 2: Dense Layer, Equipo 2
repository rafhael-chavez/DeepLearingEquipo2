{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install tensorflow"
      ],
      "metadata": {
        "id": "SCeTOWfhBFe3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from keras.utils import to_categorical\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.losses import CategoricalCrossentropy"
      ],
      "metadata": {
        "id": "6vmsu29GMT7R"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Inicialización y Definición de la Función `train_and_evaluate_model`\n",
        "\n",
        "### Función `train_and_evaluate_model`:\n",
        "Esta función toma las configuraciones de capas de una red neuronal (`layer_configs`), los datos de entrenamiento (`X_train`, `y_train`) y los de prueba (`X_test`, `y_test`). Crea un modelo `Sequential` de Keras, añade capas densas (`Dense`) según la configuración dada y lo compila con el optimizador `Adam` y la función de pérdida `binary_crossentropy`.\n",
        "\n",
        "- **Arquitectura de la Red**:\n",
        "  - Las capas ocultas se configuran dinámicamente según `layer_configs`.\n",
        "  - La capa de salida tiene 6 neuronas y utiliza la activación `sigmoid`, adecuada para una salida de tipo binario.\n",
        "  \n",
        "- **Entrenamiento**:\n",
        "  - El modelo se entrena por 50 épocas con un tamaño de lote de 10 y un 20% de los datos se usan para validación.\n",
        "  - Se guarda el historial de entrenamiento en la lista `results`.\n"
      ],
      "metadata": {
        "id": "C8-La0ZjUTZo"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "b2fg_lidAyPP"
      },
      "outputs": [],
      "source": [
        "# Definir la función para crear y entrenar el modelo\n",
        "def train_and_evaluate_model(layer_configs, X_train, y_train, X_test, y_test):\n",
        "    results = []\n",
        "\n",
        "    for layers in layer_configs:\n",
        "        model = Sequential()\n",
        "        # Agregar capas densas según la configuración\n",
        "        for neurons in layers:\n",
        "            model.add(Dense(neurons, activation='relu'))\n",
        "\n",
        "        model.add(Dense(6, activation='sigmoid'))  # Capa de salida\n",
        "        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "        # Entrenar el modelo\n",
        "        history = model.fit(X_train, y_train, epochs=50, batch_size=10, validation_split=0.2, verbose=0)\n",
        "        results.append(history)\n",
        "\n",
        "    return results"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Carga y Preprocesamiento del Dataset de Estrellas\n",
        "\n",
        "1. **Carga del Dataset**:\n",
        "   - El archivo `star_data.csv` es cargado en un DataFrame de `pandas`.\n",
        "\n",
        "2. **Selección de Columnas**:\n",
        "   - Solo se seleccionan las siguientes columnas relevantes:\n",
        "     - `Temperature (K)`: Temperatura de la estrella en Kelvin.\n",
        "     - `Luminosity(L/Lo)`: Luminosidad de la estrella en relación al Sol.\n",
        "     - `Radius(R/Ro)`: Radio de la estrella en relación al Sol.\n",
        "     - `Absolute magnitude(Mv)`: Magnitud absoluta de la estrella.\n",
        "     - `Star type`: Tipo de estrella.\n",
        "     - `Star color`: Color de la estrella.\n",
        "     - `Spectral Class`: Clase espectral de la estrella.\n",
        "\n",
        "3. **Manejo de Valores Faltantes en `Star color`**:\n",
        "   - Se reemplazan los espacios en blanco por `NaN` en la columna `Star color`.\n",
        "   - Se imputa el valor más frecuente (la moda) para reemplazar los valores faltantes en esta columna.\n",
        "\n",
        "4. **Conversión de Tipos de Datos**:\n",
        "   - Las columnas `Temperature (K)`, `Luminosity(L/Lo)`, `Radius(R/Ro)` y `Absolute magnitude(Mv)` son convertidas a datos numéricos usando `pd.to_numeric()`, reemplazando los errores con `NaN` si no es posible la conversión.\n",
        "\n",
        "5. **Eliminación de Filas con `NaN`**:\n",
        "   - Se eliminan las filas que contienen valores `NaN` tras la conversión de datos y la imputación.\n",
        "\n",
        "6. **Visualización de los Primeros Registros**:\n",
        "   - Se utiliza `df.head()` para mostrar las primeras filas del DataFrame resultante, facilitando la inspección de los datos procesados.\n"
      ],
      "metadata": {
        "id": "HOIV3vs1UmvT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('star_data.csv')\n",
        "df = df[['Temperature (K)', 'Luminosity(L/Lo)', 'Radius(R/Ro)', 'Absolute magnitude(Mv)', 'Star type', 'Star color', 'Spectral Class']]\n",
        "# Replace blank spaces with NaN\n",
        "df['Star color'] = df['Star color'].replace(' ', np.nan)\n",
        "# Impute missing values with the mode (most frequent value)\n",
        "most_common_color = df['Star color'].mode()[0]\n",
        "df['Star color'].fillna(most_common_color, inplace=True)\n",
        "df['Temperature (K)'] = pd.to_numeric(df['Temperature (K)'], errors='coerce')\n",
        "df['Luminosity(L/Lo)'] = pd.to_numeric(df['Luminosity(L/Lo)'], errors='coerce')\n",
        "df['Radius(R/Ro)'] = pd.to_numeric(df['Radius(R/Ro)'], errors='coerce')\n",
        "df['Absolute magnitude(Mv)'] = pd.to_numeric(df['Absolute magnitude(Mv)'], errors='coerce')\n",
        "df.dropna(inplace=True)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ON2hNvfcMkV5",
        "outputId": "0064d0f8-f4ff-407b-a16d-12d36d08c987"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Temperature (K)  Luminosity(L/Lo)  Radius(R/Ro)  Absolute magnitude(Mv)  \\\n",
              "0             3068          0.002400        0.1700                   16.12   \n",
              "1             3042          0.000500        0.1542                   16.60   \n",
              "2             2600          0.000300        0.1020                   18.70   \n",
              "3             2800          0.000200        0.1600                   16.65   \n",
              "4             1939          0.000138        0.1030                   20.06   \n",
              "\n",
              "   Star type Star color Spectral Class  \n",
              "0          0        Red              M  \n",
              "1          0        Red              M  \n",
              "2          0        Red              M  \n",
              "3          0        Red              M  \n",
              "4          0        Red              M  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c4fab124-62ff-494f-8c43-c388621b72ec\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Temperature (K)</th>\n",
              "      <th>Luminosity(L/Lo)</th>\n",
              "      <th>Radius(R/Ro)</th>\n",
              "      <th>Absolute magnitude(Mv)</th>\n",
              "      <th>Star type</th>\n",
              "      <th>Star color</th>\n",
              "      <th>Spectral Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3068</td>\n",
              "      <td>0.002400</td>\n",
              "      <td>0.1700</td>\n",
              "      <td>16.12</td>\n",
              "      <td>0</td>\n",
              "      <td>Red</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3042</td>\n",
              "      <td>0.000500</td>\n",
              "      <td>0.1542</td>\n",
              "      <td>16.60</td>\n",
              "      <td>0</td>\n",
              "      <td>Red</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2600</td>\n",
              "      <td>0.000300</td>\n",
              "      <td>0.1020</td>\n",
              "      <td>18.70</td>\n",
              "      <td>0</td>\n",
              "      <td>Red</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2800</td>\n",
              "      <td>0.000200</td>\n",
              "      <td>0.1600</td>\n",
              "      <td>16.65</td>\n",
              "      <td>0</td>\n",
              "      <td>Red</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1939</td>\n",
              "      <td>0.000138</td>\n",
              "      <td>0.1030</td>\n",
              "      <td>20.06</td>\n",
              "      <td>0</td>\n",
              "      <td>Red</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4fab124-62ff-494f-8c43-c388621b72ec')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c4fab124-62ff-494f-8c43-c388621b72ec button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c4fab124-62ff-494f-8c43-c388621b72ec');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d4dc3ae6-07df-42b1-9633-5a679d904045\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d4dc3ae6-07df-42b1-9633-5a679d904045')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d4dc3ae6-07df-42b1-9633-5a679d904045 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 240,\n  \"fields\": [\n    {\n      \"column\": \"Temperature (K)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9552,\n        \"min\": 1939,\n        \"max\": 40000,\n        \"num_unique_values\": 228,\n        \"samples\": [\n          10930,\n          3345,\n          3600\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Luminosity(L/Lo)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 179432.2449402145,\n        \"min\": 8e-05,\n        \"max\": 849420.0,\n        \"num_unique_values\": 208,\n        \"samples\": [\n          0.000957,\n          0.0018,\n          0.00135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Radius(R/Ro)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 517.1557634028478,\n        \"min\": 0.0084,\n        \"max\": 1948.5,\n        \"num_unique_values\": 216,\n        \"samples\": [\n          81.0,\n          1423.0,\n          5.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Absolute magnitude(Mv)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.53251235061617,\n        \"min\": -11.92,\n        \"max\": 20.06,\n        \"num_unique_values\": 228,\n        \"samples\": [\n          -6.224,\n          18.34,\n          16.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Star type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Star color\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"Red\",\n          \"Pale yellow orange\",\n          \"White-Yellow\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Spectral Class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"M\",\n          \"B\",\n          \"K\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Entrenamiento y Evaluación del Modelo con Varias Configuraciones de Hiperparámetros\n",
        "\n",
        "### Función `train_and_evaluate_model`:\n",
        "Esta función entrena un modelo de red neuronal con múltiples configuraciones de capas, activaciones y funciones de pérdida. El objetivo es encontrar la mejor combinación de estos hiperparámetros que maximice la precisión de validación.\n",
        "\n",
        "#### Parámetros:\n",
        "- **layer_configs**: Diferentes configuraciones de capas densas, especificando el número de neuronas en cada capa.\n",
        "- **activations**: Lista de funciones de activación a probar (`relu`, `tanh`, `sigmoid`).\n",
        "- **losses**: Funciones de pérdida a probar (`categorical_crossentropy` y `mean_squared_error`).\n",
        "- **X_train, y_train, X_test, y_test**: Conjuntos de entrenamiento y prueba escalados y codificados.\n",
        "\n",
        "#### Proceso:\n",
        "1. **Bucle sobre funciones de activación y de pérdida**:\n",
        "   - Para cada combinación de activación y función de pérdida, se entrena un modelo con cada configuración de capas.\n",
        "   - Las capas ocultas son añadidas dinámicamente según la configuración.\n",
        "   - La capa de salida tiene 6 neuronas con activación `softmax`, adecuada para problemas de clasificación multi-clase.\n",
        "\n",
        "2. **Compilación del Modelo**:\n",
        "   - El modelo se compila usando el optimizador `Adam` y las funciones de pérdida probadas.\n",
        "\n",
        "3. **Entrenamiento**:\n",
        "   - Se entrena el modelo durante 50 epochs con un tamaño de lote de 10 y un 20% de los datos usados para validación.\n",
        "   - Se registra la mejor precisión de validación (`val_accuracy`) obtenida para cada combinación.\n",
        "\n",
        "4. **Selección del Mejor Modelo**:\n",
        "   - Se guarda el mejor modelo basado en la precisión de validación más alta.\n",
        "   - Los mejores hiperparámetros (función de activación, función de pérdida y configuración de capas) se almacenan en `best_params`.\n",
        "\n",
        "#### Configuraciones Propuestas:\n",
        "- **Capas**:\n",
        "  - `[64, 32]`: Dos capas con 64 y 32 neuronas.\n",
        "  - `[128, 64]`: Dos capas con 128 y 64 neuronas.\n",
        "  - `[32]`: Una capa con 32 neuronas.\n",
        "  - `[64, 64]`: Dos capas con 64 neuronas cada una.\n",
        "\n",
        "- **Activaciones**:\n",
        "  - `'relu'`, `'tanh'`, `'sigmoid'`\n",
        "\n",
        "- **Funciones de Pérdida**:\n",
        "  - `'categorical_crossentropy'`, `'mean_squared_error'`\n",
        "\n",
        "#### Resultados:\n",
        "- El mejor modelo se encontró con:\n",
        "  - **Activación**: `relu`\n",
        "  - **Pérdida**: `categorical_crossentropy`\n",
        "  - **Capas**: `[64, 32]`\n",
        "  \n",
        "- Estos hiperparámetros proporcionaron la mayor precisión de validación durante el entrenamiento.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "jwCjK0M3U0g_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# # Definir la función para crear y entrenar el modelo con diferentes activaciones y funciones de pérdida\n",
        "# def train_and_evaluate_model(layer_configs, activations, losses, X_train, y_train, X_test, y_test):\n",
        "#     results = []\n",
        "#     best_model = None\n",
        "#     best_val_accuracy = 0\n",
        "#     best_params = {}\n",
        "\n",
        "#     for activation in activations:\n",
        "#         for loss in losses:\n",
        "#             for layers in layer_configs:\n",
        "#                 model = Sequential()\n",
        "\n",
        "#                 # Agregar capas densas según la configuración\n",
        "#                 for neurons in layers:\n",
        "#                     model.add(Dense(neurons, activation=activation))\n",
        "\n",
        "#                 model.add(Dense(6, activation='softmax'))  # Capa de salida para clasificación multi-clase\n",
        "#                 model.compile(optimizer='adam', loss=loss, metrics=['accuracy'])  # Compilar el modelo\n",
        "\n",
        "#                 # Entrenar el modelo\n",
        "#                 history = model.fit(X_train, y_train, epochs=50, batch_size=10, validation_split=0.2, verbose=0)\n",
        "#                 val_accuracy = max(history.history['val_accuracy'])\n",
        "#                 results.append((history, activation, loss, layers))\n",
        "\n",
        "#                 # Guardar el mejor modelo basado en la precisión de validación\n",
        "#                 if val_accuracy > best_val_accuracy:\n",
        "#                     best_val_accuracy = val_accuracy\n",
        "#                     best_model = model\n",
        "#                     best_params = {'activation': activation, 'loss': loss, 'layers': layers}\n",
        "\n",
        "#     return results, best_model, best_params\n",
        "\n",
        "# # Definir diferentes configuraciones de capas, activaciones y funciones de pérdida\n",
        "# layer_configs = [\n",
        "#     [64, 32],   # 64 neuronas en la primera capa, 32 en la segunda\n",
        "#     [128, 64],  # 128 neuronas en la primera capa, 64 en la segunda\n",
        "#     [32],       # 32 neuronas en una sola capa\n",
        "#     [64, 64],   # 64 neuronas en dos capas\n",
        "# ]\n",
        "\n",
        "# activations = ['relu', 'tanh', 'sigmoid']  # Diferentes funciones de activación a probar\n",
        "# losses = ['categorical_crossentropy', 'mean_squared_error']  # Diferentes funciones de pérdida\n",
        "\n",
        "# # Entrenar y evaluar el modelo\n",
        "# results, best_model, best_params = train_and_evaluate_model(layer_configs, activations, losses, X_train_scaled, y_train_encoded, X_test_scaled, y_test_encoded)\n",
        "\n",
        "# # Mostrar los mejores hiperparámetros encontrados\n",
        "# print(f\"Mejores hiperparámetros encontrados:\\n Activación: {best_params['activation']}\\n Pérdida: {best_params['loss']}\\n Capas: {best_params['layers']}\")\n",
        "\n",
        "# Mejores hiperparámetros encontrados:\n",
        "#  Activación: relu\n",
        "#  Pérdida: categorical_crossentropy\n",
        "#  Capas: [64, 32]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CsbrzWlcMQAd",
        "outputId": "41aa6516-f2c2-4671-9881-cea8b0c9507c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mejores hiperparámetros encontrados:\n",
            " Activación: relu\n",
            " Pérdida: categorical_crossentropy\n",
            " Capas: [64, 32]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Preparación de Datos\n",
        "\n",
        "1. **Variables de Entrada y Salida**:\n",
        "   - **Entrada (X)**: Se seleccionan las columnas numéricas relacionadas con las características físicas de las estrellas: `Temperature (K)`, `Luminosity(L/Lo)`, `Radius(R/Ro)`, y `Absolute magnitude(Mv)`.\n",
        "   - **Salida (y)**: La columna `Star type`, que representa el tipo de estrella, es utilizada como la variable objetivo.\n",
        "\n",
        "2. **División de los Datos**:\n",
        "   - Se utiliza la función `train_test_split()` para dividir los datos en un conjunto de entrenamiento (80%) y un conjunto de prueba (20%), con una semilla aleatoria establecida en `random_state=42` para asegurar la reproducibilidad.\n",
        "\n",
        "3. **Escalado**:\n",
        "   - Los datos de entrada se escalan utilizando `StandardScaler`, lo que normaliza las características para tener media cero y varianza uno. Esto es crucial para mejorar la eficiencia de los modelos de machine learning.\n",
        "   - El conjunto de entrenamiento se ajusta y transforma, mientras que el conjunto de prueba solo se transforma utilizando los parámetros obtenidos del conjunto de entrenamiento.\n",
        "\n",
        "4. **Etiquetas**:\n",
        "   - Las etiquetas de salida (`Star type`) se convierten en formato **one-hot** mediante `to_categorical()`, lo que es necesario para la clasificación multi-clase.\n",
        "   - El número de clases es 6, ya que hay seis tipos de estrellas en el dataset.\n",
        "\n",
        "### Entrenamiento del Modelo:\n",
        "\n",
        "1. **Función `train_and_evaluate_model`**:\n",
        "   - Esta función entrena un modelo con diferentes configuraciones de capas densas.\n",
        "   - En este caso, se prueba con una configuración de capas de 64 neuronas en la primera capa y 32 en la segunda.\n",
        "   - La última capa es una capa de salida con activación `softmax`, adecuada para clasificación multi-clase, y el modelo se compila con el optimizador `Adam` y la función de pérdida `categorical_crossentropy`.\n",
        "\n",
        "2. **Entrenamiento**:\n",
        "   - El modelo se entrena durante 50 epochs, con un tamaño de lote de 10 y un 20% de los datos de entrenamiento usados para validación.\n",
        "   - El historial de entrenamiento se guarda para análisis posterior.\n",
        "\n",
        "### Resultados:\n",
        "\n",
        "1. **Gráficas**:\n",
        "   - Para cada configuración, se genera una gráfica que muestra la precisión de entrenamiento y validación por época.\n",
        "   - Esto permite visualizar cómo se comporta el modelo durante el entrenamiento y detectar posibles casos de sobreajuste o subajuste.\n",
        "\n",
        "2. **Interpretación**:\n",
        "   - El eje X representa el número de epochs y el eje Y la precisión.\n",
        "   - Se trazan dos líneas: una para la precisión del conjunto de entrenamiento y otra para la precisión del conjunto de validación.\n",
        "\n"
      ],
      "metadata": {
        "id": "PC8NwV1nVRPI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Definir las variables de entrada y salida\n",
        "X = df[['Temperature (K)', 'Luminosity(L/Lo)', 'Radius(R/Ro)', 'Absolute magnitude(Mv)']].to_numpy(float)\n",
        "y = df['Star type'].to_numpy()\n",
        "\n",
        "# Dividir los datos en conjuntos de entrenamiento y prueba\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Escalar los datos\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "# Convertir las etiquetas a formato one-hot\n",
        "y_train_encoded = to_categorical(y_train, num_classes=6)\n",
        "y_test_encoded = to_categorical(y_test, num_classes=6)\n",
        "\n",
        "# Definir la función para crear y entrenar el modelo\n",
        "def train_and_evaluate_model(layer_configs, X_train, y_train, X_test, y_test):\n",
        "    results = []\n",
        "\n",
        "    for layers in layer_configs:\n",
        "        model = Sequential()\n",
        "\n",
        "        # Agregar capas densas según la configuración\n",
        "        for neurons in layers:\n",
        "            model.add(Dense(neurons, activation='relu'))\n",
        "\n",
        "        model.add(Dense(6, activation='softmax'))  # Capa de salida para clasificación multi-clase\n",
        "        model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])  # Compilar el modelo\n",
        "\n",
        "        # Entrenar el modelo\n",
        "        history = model.fit(X_train, y_train, epochs=50, batch_size=10, validation_split=0.2, verbose=0)\n",
        "        results.append(history)\n",
        "\n",
        "    return results\n",
        "\n",
        "# Definir diferentes configuraciones de capas\n",
        "layer_configs = [\n",
        "    [64, 32],   # 64 neuronas en la primera capa, 32 en la segunda\n",
        "]\n",
        "\n",
        "# Entrenar y evaluar el modelo\n",
        "results = train_and_evaluate_model(layer_configs, X_train_scaled, y_train_encoded, X_test_scaled, y_test_encoded)\n",
        "\n",
        "# Visualizar los resultados, generando una gráfica por cada configuración\n",
        "for i, history in enumerate(results):\n",
        "    plt.figure()  # Crear una nueva figura para cada configuración\n",
        "    plt.plot(history.history['accuracy'], label=f'Config {i+1} Train Acc')\n",
        "    plt.plot(history.history['val_accuracy'], label=f'Config {i+1} Val Acc')\n",
        "    plt.xlabel('Epochs')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.legend()\n",
        "    plt.title(f'Model Accuracy for Configuration {i+1}')\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "klONeHrbXe7l",
        "outputId": "04f3d17e-648e-4697-a31d-3d3fe32c4490"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Mostrar accuracy score\n",
        "model = results[0].model\n",
        "y_pred = model.predict(X_test_scaled)\n",
        "y_pred_labels = np.argmax(y_pred, axis=1)\n",
        "y_true_labels = np.argmax(y_test_encoded, axis=1)\n",
        "print(\"Accuracy score:\", accuracy_score(y_true_labels, y_pred_labels))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0f3vWvDdms0q",
        "outputId": "1ba7a5a7-420d-48b5-813e-e1a675063982"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 60ms/step\n",
            "Accuracy score: 0.9791666666666666\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Gráfica de Resultados de Entrenamiento\n",
        "\n",
        "### Función `plot_results()`\n",
        "\n",
        "- Esta función recibe los resultados del entrenamiento de los modelos y las configuraciones de capas utilizadas, para luego generar dos gráficos clave que muestran el desempeño del modelo:\n",
        "  \n",
        "  1. **Accuracy**:\n",
        "     - Se grafica la precisión del modelo en los conjuntos de entrenamiento y validación a lo largo de los epochs. Esto permite observar cómo mejora (o empeora) la capacidad del modelo para clasificar correctamente a medida que avanza el entrenamiento.\n",
        "  \n",
        "  2. **Loss**:\n",
        "     - Se grafica la pérdida para los conjuntos de entrenamiento y validación. La pérdida es una medida que indica qué tan bien o mal se está ajustando el modelo a los datos. Un valor de pérdida más bajo implica un mejor ajuste.\n",
        "\n",
        "### Características de la Gráfica:\n",
        "\n",
        "1. **Accuracy**:\n",
        "   - **Eje X**: Representa el número de épocas.\n",
        "   - **Eje Y**: Muestra los valores de precisión.\n",
        "   - Para cada configuración de capas, se muestran dos líneas:\n",
        "     - **Train**: Precisión en el conjunto de entrenamiento.\n",
        "     - **Val**: Precisión en el conjunto de validación.\n",
        "\n",
        "2. **Loss**:\n",
        "   - **Eje X**: Representa el número de épocas.\n",
        "   - **Eje Y**: Muestra los valores de pérdida.\n",
        "   - Para cada configuración, se muestran dos líneas:\n",
        "     - **Train**: Pérdida en el conjunto de entrenamiento.\n",
        "     - **Val**: Pérdida en el conjunto de validación.\n",
        "\n",
        "### Gráficas:\n",
        "\n",
        "- **Título**: Se añaden títulos a las dos gráficas para diferenciarlas:\n",
        "  - \"Model Accuracy\" para la precisión.\n",
        "  - \"Model Loss\" para la pérdida.\n",
        "  \n",
        "- **Etiquetas de Ejes**: Se añaden etiquetas a los ejes X e Y para proporcionar contexto sobre qué representan los valores graficados.\n",
        "  \n",
        "- **Leyenda**: Se añade una leyenda que indica a qué configuración de capas y conjunto de datos pertenece cada línea.\n",
        "\n",
        "### Llamada a la Función:\n",
        "\n",
        "- Finalmente, la función `plot_results()` es invocada para visualizar los resultados de las configuraciones de capas probadas.\n",
        "\n",
        "### Interpretación:\n",
        "\n",
        "Estas gráficas te permiten comparar de manera visual el rendimiento del modelo en términos de precisión y pérdida a través de diferentes configuraciones de capas. Asi se puede observar si el modelo está sobreajustándose o subajustándose al comparar el comportamiento entre el conjunto de entrenamiento y validación.\n"
      ],
      "metadata": {
        "id": "kYs13MP9V6v5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Graficar los resultados\n",
        "def plot_results(results, layer_configs):\n",
        "    plt.figure(figsize=(12, 6))\n",
        "\n",
        "    for i, history in enumerate(results):\n",
        "        # Graficar accuracy\n",
        "        plt.subplot(1, 2, 1)\n",
        "        plt.plot(history.history['accuracy'], label=f'Config {i+1} - Train')\n",
        "        plt.plot(history.history['val_accuracy'], label=f'Config {i+1} - Val')\n",
        "\n",
        "        # Graficar loss\n",
        "        plt.subplot(1, 2, 2)\n",
        "        plt.plot(history.history['loss'], label=f'Config {i+1} - Train')\n",
        "        plt.plot(history.history['val_loss'], label=f'Config {i+1} - Val')\n",
        "\n",
        "    # Personalizar las gráficas\n",
        "    plt.subplot(1, 2, 1)\n",
        "    plt.title('Model Accuracy')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.legend()\n",
        "\n",
        "    plt.subplot(1, 2, 2)\n",
        "    plt.title('Model Loss')\n",
        "    plt.ylabel('Loss')\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.legend()\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Llamar a la función para graficar los resultados\n",
        "plot_results(results, layer_configs)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "XKpz9dV4G08G",
        "outputId": "98c53d43-7b19-491c-af55-81d155adb193"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAJOCAYAAABm7rQwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAADkpklEQVR4nOzdd3RU5dbH8e9Meg+BkEYgoffeVYqiiIiKqCAqilgBG17fKzbs2MWCvSBeVCyI91pQCCIiSI/0GiCQSoD0njnvH5MMDEkgCUkm5fdZa9acPKftGdqw59n7MRmGYSAiIiIiIiIiIlKLzI4OQEREREREREREGh8lpUREREREREREpNYpKSUiIiIiIiIiIrVOSSkREREREREREal1SkqJiIiIiIiIiEitU1JKRERERERERERqnZJSIiIiIiIiIiJS65SUEhERERERERGRWqeklIiIiIiIiIiI1DolpUSkTjCZTDz55JOVPu/gwYOYTCbmzZtX7TGJiIiINCb6PCYitU1JKRGxmTdvHiaTCZPJxKpVq0rtNwyD8PBwTCYTl19+uQMirB4///wzJpOJ0NBQLBaLo8MRERERsWnIn8dWrFiByWTi22+/dXQoIlJHKCklIqW4u7vzxRdflBr/448/OHLkCG5ubg6IqvosWLCAiIgIEhISWL58uaPDERERESmloX8eExEBJaVEpAyXXXYZ33zzDYWFhXbjX3zxBX369CE4ONhBkZ27rKwsfvjhB2bMmEGvXr1YsGCBo0MqV1ZWlqNDEBEREQdpyJ/HRERKKCklIqVcf/31HDt2jKVLl9rG8vPz+fbbb5k4cWKZ52RlZfHggw8SHh6Om5sbHTp04JVXXsEwDLvj8vLyeOCBBwgMDMTHx4crrriCI0eOlHnNuLg4br31VoKCgnBzc6NLly588skn5/Tavv/+e3Jycrj22muZMGECixYtIjc3t9Rxubm5PPnkk7Rv3x53d3dCQkK4+uqr2b9/v+0Yi8XCG2+8Qbdu3XB3dycwMJBLL72UDRs2AGfur3B6z4Ynn3wSk8nEjh07mDhxIk2aNOH8888HYMuWLdxyyy20bt0ad3d3goODufXWWzl27FiZ79mUKVMIDQ3Fzc2NyMhI7r77bvLz84mJicFkMvH666+XOm/16tWYTCa+/PLLyr6lIiIiUgMa8uexs4mJieHaa68lICAAT09PBg4cyE8//VTquLfeeosuXbrg6elJkyZN6Nu3r93ssoyMDO6//34iIiJwc3OjefPmXHzxxWzatKlG4xeRinN2dAAiUvdEREQwaNAgvvzyS0aNGgXAL7/8QlpaGhMmTODNN9+0O94wDK644gp+//13pkyZQs+ePfn111956KGHiIuLs0uC3HbbbfznP/9h4sSJDB48mOXLlzN69OhSMSQlJTFw4EBMJhPTp08nMDCQX375hSlTppCens79999fpde2YMEChg8fTnBwMBMmTODhhx/mf//7H9dee63tmKKiIi6//HKioqKYMGEC9913HxkZGSxdupRt27bRpk0bAKZMmcK8efMYNWoUt912G4WFhfz555/8/fff9O3bt0rxXXvttbRr147nn3/e9gFy6dKlxMTEMHnyZIKDg9m+fTsffPAB27dv5++//8ZkMgEQHx9P//79SU1N5Y477qBjx47ExcXx7bffkp2dTevWrTnvvPNYsGABDzzwQKn3xcfHhyuvvLJKcYuIiEj1asifx84kKSmJwYMHk52dzb333kvTpk357LPPuOKKK/j2228ZO3YsAB9++CH33nsv11xzDffddx+5ubls2bKFtWvX2pJ2d911F99++y3Tp0+nc+fOHDt2jFWrVrFz50569+5d7bGLSBUYIiLFPv30UwMw1q9fb7z99tuGj4+PkZ2dbRiGYVx77bXG8OHDDcMwjFatWhmjR4+2nbd48WIDMJ599lm7611zzTWGyWQy9u3bZxiGYURHRxuAMXXqVLvjJk6caADGrFmzbGNTpkwxQkJCjJSUFLtjJ0yYYPj5+dniOnDggAEYn3766VlfX1JSkuHs7Gx8+OGHtrHBgwcbV155pd1xn3zyiQEYr732WqlrWCwWwzAMY/ny5QZg3HvvveUec6bYTn+9s2bNMgDj+uuvL3VsyWs91ZdffmkAxsqVK21jkyZNMsxms7F+/fpyY3r//fcNwNi5c6dtX35+vtGsWTPj5ptvLnWeiIiI1K6G/Hns999/NwDjm2++KfeY+++/3wCMP//80zaWkZFhREZGGhEREUZRUZFhGIZx5ZVXGl26dDnj/fz8/Ixp06ad8RgRcSyV74lIma677jpycnL48ccfycjI4Mcffyx3qvjPP/+Mk5MT9957r934gw8+iGEY/PLLL7bjgFLHnf4tm2EYfPfdd4wZMwbDMEhJSbE9Ro4cSVpaWpWmXX/11VeYzWbGjRtnG7v++uv55ZdfOHHihG3su+++o1mzZtxzzz2lrlEyK+m7777DZDIxa9asco+pirvuuqvUmIeHh207NzeXlJQUBg4cCGB7HywWC4sXL2bMmDFlztIqiem6667D3d3drpfWr7/+SkpKCjfeeGOV4xYREZHq1xA/j53Nzz//TP/+/W1tDAC8vb254447OHjwIDt27ADA39+fI0eOsH79+nKv5e/vz9q1a4mPj6/2OEWkeigpJSJlCgwMZMSIEXzxxRcsWrSIoqIirrnmmjKPPXToEKGhofj4+NiNd+rUyba/5NlsNtvK30p06NDB7uejR4+SmprKBx98QGBgoN1j8uTJACQnJ1f6Nf3nP/+hf//+HDt2jH379rFv3z569epFfn4+33zzje24/fv306FDB5ydy69w3r9/P6GhoQQEBFQ6jjOJjIwsNXb8+HHuu+8+goKC8PDwIDAw0HZcWloaYH3P0tPT6dq16xmv7+/vz5gxY+z6LSxYsICwsDAuvPDCanwlIiIicq4a4uexszl06FCpWMp6Hf/+97/x9vamf//+tGvXjmnTpvHXX3/ZnfPSSy+xbds2wsPD6d+/P08++SQxMTHVHrOIVJ16SolIuSZOnMjtt99OYmIio0aNwt/fv1bua7FYALjxxhu5+eabyzyme/fulbrm3r17bd+ktWvXrtT+BQsWcMcdd1Qy0jMrb8ZUUVFRueecOiuqxHXXXcfq1at56KGH6NmzJ97e3lgsFi699FLbe1UZkyZN4ptvvmH16tV069aN//73v0ydOhWzWd9TiIiI1DUN6fNYderUqRO7d+/mxx9/ZMmSJXz33Xe88847PPHEEzz11FOA9TPUBRdcwPfff89vv/3Gyy+/zIsvvsiiRYtsfbpExLGUlBKRco0dO5Y777yTv//+m4ULF5Z7XKtWrVi2bBkZGRl2387t2rXLtr/k2WKx2GYildi9e7fd9UpWgikqKmLEiBHV8loWLFiAi4sLn3/+OU5OTnb7Vq1axZtvvklsbCwtW7akTZs2rF27loKCAlxcXMq8Xps2bfj11185fvx4ubOlmjRpAkBqaqrdeMk3fBVx4sQJoqKieOqpp3jiiSds43v37rU7LjAwEF9fX7Zt23bWa1566aUEBgayYMECBgwYQHZ2NjfddFOFYxIREZHa05A+j1VEq1atSsUCpV8HgJeXF+PHj2f8+PHk5+dz9dVX89xzzzFz5kzc3d0BCAkJYerUqUydOpXk5GR69+7Nc889p6SUSB2hr8VFpFze3t68++67PPnkk4wZM6bc4y677DKKiop4++237cZff/11TCaT7R/9kufTV4uZM2eO3c9OTk6MGzeO7777rswky9GjRyv9WhYsWMAFF1zA+PHjueaaa+weDz30EABffvklAOPGjSMlJaXU6wFsK+KNGzcOwzBs38SVdYyvry/NmjVj5cqVdvvfeeedCsddkkAzTlvK+fT3zGw2c9VVV/G///2PDRs2lBsTgLOzM9dffz1ff/018+bNo1u3bg79plNERETK15A+j1XEZZddxrp161izZo1tLCsriw8++ICIiAg6d+4MwLFjx+zOc3V1pXPnzhiGQUFBAUVFRbY2ByWaN29OaGgoeXl5NRK7iFSeZkqJyBmVN137VGPGjGH48OE8+uijHDx4kB49evDbb7/xww8/cP/999t6FvTs2ZPrr7+ed955h7S0NAYPHkxUVBT79u0rdc0XXniB33//nQEDBnD77bfTuXNnjh8/zqZNm1i2bBnHjx+v8GtYu3Yt+/btY/r06WXuDwsLo3fv3ixYsIB///vfTJo0ifnz5zNjxgzWrVvHBRdcQFZWFsuWLWPq1KlceeWVDB8+nJtuuok333yTvXv32krp/vzzT4YPH26712233cYLL7zAbbfdRt++fVm5ciV79uypcOy+vr4MGTKEl156iYKCAsLCwvjtt984cOBAqWOff/55fvvtN4YOHcodd9xBp06dSEhI4JtvvmHVqlV20/0nTZrEm2++ye+//86LL75Y4XhERESk9jWEz2On+u6772wzn05/nQ8//DBffvklo0aN4t577yUgIIDPPvuMAwcO8N1339naDVxyySUEBwdz3nnnERQUxM6dO3n77bcZPXo0Pj4+pKam0qJFC6655hp69OiBt7c3y5YtY/369bz66qtViltEaoBjFv0Tkbro1CWIz+T0JYgNw7pU7wMPPGCEhoYaLi4uRrt27YyXX37ZsFgsdsfl5OQY9957r9G0aVPDy8vLGDNmjHH48OFSSxAbhmEkJSUZ06ZNM8LDww0XFxcjODjYuOiii4wPPvjAdkxFliC+5557DMDYv39/ucc8+eSTBmD8888/hmEYRnZ2tvHoo48akZGRtntfc801dtcoLCw0Xn75ZaNjx46Gq6urERgYaIwaNcrYuHGj7Zjs7GxjypQphp+fn+Hj42Ncd911RnJycqnXO2vWLAMwjh49Wiq2I0eOGGPHjjX8/f0NPz8/49prrzXi4+PLfM8OHTpkTJo0yQgMDDTc3NyM1q1bG9OmTTPy8vJKXbdLly6G2Ww2jhw5Uu77IiIiIrWroX4eMwzD+P333w2g3Meff/5pGIZh7N+/37jmmmsMf39/w93d3ejfv7/x448/2l3r/fffN4YMGWI0bdrUcHNzM9q0aWM89NBDRlpammEYhpGXl2c89NBDRo8ePQwfHx/Dy8vL6NGjh/HOO++cMUYRqV0mwzitJkRERBqFXr16ERAQQFRUlKNDERERERGRRkg9pUREGqENGzYQHR3NpEmTHB2KiIiIiIg0UpopJSLSiGzbto2NGzfy6quvkpKSQkxMjG11GhERERERkdqkmVIiIo3It99+y+TJkykoKODLL79UQkpERERERBxGM6VERERERERERKTWaaaUiIiIiIiIiIjUOiWlRERERERERESk1jk7OoDaZrFYiI+Px8fHB5PJ5OhwREREpA4zDIOMjAxCQ0Mxmxv3d3n6DCUiIiIVVdHPUI0uKRUfH094eLijwxAREZF65PDhw7Ro0cLRYTiUPkOJiIhIZZ3tM1SjS0r5+PgA1jfG19fXwdGIiIhIXZaenk54eLjt80Njps9QIiIiUlEV/QzV6JJSJdPNfX199YFKREREKkTlavoMJSIiIpV3ts9Qjbs5goiIiIiIiIiIOISSUiIiIiIiIiIiUuuUlBIRERERERERkVrX6HpKiYiIiIiIiDQGRUVFFBQUODoMaYBcXFxwcnI65+soKSUiIiIiIiLSgBiGQWJiIqmpqY4ORRowf39/goODz2lBGCWlRERERERERBqQkoRU8+bN8fT01CqyUq0MwyA7O5vk5GQAQkJCqnwtJaVEREREREREGoiioiJbQqpp06aODkcaKA8PDwCSk5Np3rx5lUv51OhcREREREREpIEo6SHl6enp4EikoSv5PXYufcuUlBIRERERERFpYFSyJzWtOn6PKSklIiIiIiIiIiK1TkkpEREREREREWk0DMPgjjvuICAgAJPJRHR0NMOGDeP+++93dGi1ZsWKFZhMJoev0KiklIiI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C50tMzPz9IMXERER+RUlpUREpElrYc/jEC840/6M2e12kpKSSEtLc+5zOBykpaWRkpLS4DEpKSn1+gMsXrz4mP0B/Pz8CA0NrddEREREXEk1pUREpEmqK8JdWlpKQECAl6OR5qyyshIAm83m5Ugab9KkSYwbN46BAwcyePBgpk+fTklJCePHjwdg7NixtGnThmnTpgFw//33M2LECP7xj39w6aWXMmfOHFauXMmrr77qzbchIiIiLZySUiIi0iTZbDbCw8M5cOAAAIGBgVgsFi9HJc2Nw+Hg4MGDBAYG4uNz5gyLRo8ezcGDB5kyZQrZ2dn079+fhQsXOouZZ2RkYLUemRA/ZMgQ3nvvPf785z/zyCOP0KVLFxYsWEDv3r299RZEREREsBhn2pz101RUVERYWBiFhYWahi4i0sQZhkF2djYFBQXeDkWaMavVSocOHbDb7Ue9pnHDEfosREREpLEaO244c74SFBGRFsdisRAfH09MTAxVVVXeDkeaKbvdXm9WkYiIiIh4hpJSIiLS5NlstjOq3o+IiIiIiJyYvhYUERERERERERGPU1JKREREREREREQ8TkkpERERERERERHxuBZXU6ruYYNFRUVejkRERESaurrxQgt7WHGDNIYSERGRxmrsGKrFJaUOHz4MQEJCgpcjERERkTPF4cOHCQsL83YYXqUxlIiIiJysE42hLEYL++rP4XCwf/9+QkJCsFgsLj9/UVERCQkJZGZmEhoa6vLzS+PoPnif7kHToPvQNOg+eN+p3gPDMDh8+DCtW7fGam3ZVQ80hmr+dA+aBt2HpkH3wft0D5oGd4+hWtxMKavVStu2bd1+ndDQUP3FaQJ0H7xP96Bp0H1oGnQfvO9U7kFLnyFVR2OolkP3oGnQfWgadB+8T/egaXDXGKplf+UnIiIiIiIiIiJeoaSUiIiIiIiIiIh4nJJSLubn58fjjz+On5+ft0Np0XQfvE/3oGnQfWgadB+8T/eg6dM98j7dg6ZB96Fp0H3wPt2DpsHd96HFFToXERERERERERHv00wpERERERERERHxOCWlRERERERERETE45SUEhERERERERERj1NSysVmzJhBYmIi/v7+JCcns3z5cm+H1Kz997//5bLLLqN169ZYLBYWLFhQ73XDMJgyZQrx8fEEBAQwatQotm/f7p1gm6lp06YxaNAgQkJCiImJ4corr2Tr1q31+pSXlzNhwgRatWpFcHAw11xzDTk5OV6KuPl55ZVX6Nu3L6GhoYSGhpKSksKXX37pfF2fv3c888wzWCwWHnjgAec+3Qv3e+KJJ7BYLPVa9+7dna/rHjRNGj95lsZP3qfxU9OgMVTTo/GTd3hz/KSklAvNnTuXSZMm8fjjj7N69Wr69etHamoqBw4c8HZozVZJSQn9+vVjxowZDb7+97//nRdffJGZM2fy888/ExQURGpqKuXl5R6OtPlaunQpEyZM4KeffmLx4sVUVVVx4YUXUlJS4uzz4IMP8p///Id58+axdOlS9u/fz9VXX+3FqJuXtm3b8swzz7Bq1SpWrlzJ+eefzxVXXMHGjRsBff7esGLFCv71r3/Rt2/fevt1LzyjV69eZGVlOdv333/vfE33oOnR+MnzNH7yPo2fmgaNoZoWjZ+8y2vjJ0NcZvDgwcaECROcv9fU1BitW7c2pk2b5sWoWg7A+Pjjj52/OxwOIy4uznj22Wed+woKCgw/Pz/j/fff90KELcOBAwcMwFi6dKlhGOZn7uvra8ybN8/ZZ/PmzQZgLFu2zFthNnsRERHGa6+9ps/fCw4fPmx06dLFWLx4sTFixAjj/vvvNwxDfxc85fHHHzf69evX4Gu6B02Txk/epfFT06DxU9OhMZR3aPzkXd4cP2mmlItUVlayatUqRo0a5dxntVoZNWoUy5Yt82JkLdfu3bvJzs6ud0/CwsJITk7WPXGjwsJCACIjIwFYtWoVVVVV9e5D9+7dadeune6DG9TU1DBnzhxKSkpISUnR5+8FEyZM4NJLL633mYP+LnjS9u3bad26NR07dmTMmDFkZGQAugdNkcZPTY/GT96h8ZP3aQzlXRo/eZ+3xk8+p30GASA3N5eamhpiY2Pr7Y+NjWXLli1eiqply87OBmjwntS9Jq7lcDh44IEHGDp0KL179wbM+2C32wkPD6/XV/fBtdavX09KSgrl5eUEBwfz8ccf07NnT9auXavP34PmzJnD6tWrWbFixVGv6e+CZyQnJzN79my6detGVlYWTz75JMOGDWPDhg26B02Qxk9Nj8ZPnqfxk3dpDOV9Gj95nzfHT0pKiYjLTJgwgQ0bNtRbfyye0a1bN9auXUthYSHz589n3LhxLF261NthtSiZmZncf//9LF68GH9/f2+H02JdfPHFzu2+ffuSnJxM+/bt+eCDDwgICPBiZCIiDdP4ybs0hvIujZ+aBm+On7R8z0WioqKw2WxHVaDPyckhLi7OS1G1bHWfu+6JZ0ycOJHPPvuMb7/9lrZt2zr3x8XFUVlZSUFBQb3+ug+uZbfb6dy5M0lJSUybNo1+/frxz3/+U5+/B61atYoDBw4wYMAAfHx88PHxYenSpbz44ov4+PgQGxure+EF4eHhdO3alR07dujvQxOk8VPTo/GTZ2n85H0aQ3mXxk9NkyfHT0pKuYjdbicpKYm0tDTnPofDQVpaGikpKV6MrOXq0KEDcXFx9e5JUVERP//8s+6JCxmGwcSJE/n444/55ptv6NChQ73Xk5KS8PX1rXcftm7dSkZGhu6DGzkcDioqKvT5e9DIkSNZv349a9eudbaBAwcyZswY57buhecVFxezc+dO4uPj9fehCdL4qenR+MkzNH5qujSG8iyNn5omj46fTrtUujjNmTPH8PPzM2bPnm1s2rTJuPPOO43w8HAjOzvb26E1W4cPHzbWrFljrFmzxgCM559/3lizZo2xZ88ewzAM45lnnjHCw8ONTz75xPjll1+MK664wujQoYNRVlbm5cibj3vuuccICwszlixZYmRlZTlbaWmps8/dd99ttGvXzvjmm2+MlStXGikpKUZKSooXo25eHn74YWPp0qXG7t27jV9++cV4+OGHDYvFYnz11VeGYejz96ZfPz3GMHQvPOGhhx4ylixZYuzevdv44YcfjFGjRhlRUVHGgQMHDMPQPWiKNH7yPI2fvE/jp6ZBY6imSeMnz/Pm+ElJKRd76aWXjHbt2hl2u90YPHiw8dNPP3k7pGbt22+/NYCj2rhx4wzDMB9r/NhjjxmxsbGGn5+fMXLkSGPr1q3eDbqZaejzB4w333zT2aesrMy49957jYiICCMwMNC46qqrjKysLO8F3czceuutRvv27Q273W5ER0cbI0eOdA6mDEOfvzf976BK98L9Ro8ebcTHxxt2u91o06aNMXr0aGPHjh3O13UPmiaNnzxL4yfv0/ipadAYqmnS+MnzvDl+shiGYZz+fCsREREREREREZHGU00pERERERERERHxOCWlRERERERERETE45SUEhERERERERERj1NSSkREREREREREPE5JKRERERERERER8TglpURERERERERExOOUlBIREREREREREY9TUkpERERERERERDxOSSkRkdNgsVhYsGCBt8MQEREROaNoDCUioKSUiJzBbrnlFiwWy1Htoosu8nZoIiIiIk2WxlAi0lT4eDsAEZHTcdFFF/Hmm2/W2+fn5+elaERERETODBpDiUhToJlSInJG8/PzIy4url6LiIgAzGnhr7zyChdffDEBAQF07NiR+fPn1zt+/fr1nH/++QQEBNCqVSvuvPNOiouL6/V544036NWrF35+fsTHxzNx4sR6r+fm5nLVVVcRGBhIly5d+PTTT937pkVEREROk8ZQItIUKCklIs3aY489xjXXXMO6desYM2YMN9xwA5s3bwagpKSE1NRUIiIiWLFiBfPmzePrr7+uN2B65ZVXmDBhAnfeeSfr16/n008/pXPnzvWu8eSTT3L99dfzyy+/cMkllzBmzBjy8vI8+j5FREREXEljKBHxCENE5Aw1btw4w2azGUFBQfXa1KlTDcMwDMC4++676x2TnJxs3HPPPYZhGMarr75qREREGMXFxc7XP//8c8NqtRrZ2dmGYRhG69atjUcfffSYMQDGn//8Z+fvxcXFBmB8+eWXLnufIiIiIq6kMZSINBWqKSUiZ7TzzjuPV155pd6+yMhI53ZKSkq911JSUli7di0Amzdvpl+/fgQFBTlfHzp0KA6Hg61bt2KxWNi/fz8jR448bgx9+/Z1bgcFBREaGsqBAwdO9S2JiIiIuJ3GUCLSFCgpJSJntKCgoKOmgrtKQEBAo/r5+vrW+91iseBwONwRkoiIiIhLaAwlIk2BakqJSLP2008/HfV7jx49AOjRowfr1q2jpKTE+foPP/yA1WqlW7duhISEkJiYSFpamkdjFhEREfE2jaFExBM0U0pEzmgVFRVkZ2fX2+fj40NUVBQA8+bNY+DAgZxzzjm8++67LF++nNdffx2AMWPG8PjjjzNu3DieeOIJDh48yH333cfNN99MbGwsAE888QR33303MTExXHzxxRw+fJgffviB++67z7NvVERERMSFNIYSkaZASSkROaMtXLiQ+Pj4evu6devGli1bAPOpLnPmzOHee+8lPj6e999/n549ewIQGBjIokWLuP/++xk0aBCBgYFcc801PP/8885zjRs3jvLycl544QV+//vfExUVxbXXXuu5NygiIiLiBhpDiUhTYDEMw/B2ECIi7mCxWPj444+58sorvR2KiIiIyBlDYygR8RTVlBIREREREREREY9TUkpERERERERERDxOy/dERERERERERMTjNFNKREREREREREQ8TkkpERERERERERHxOCWlRERERERERETE45SUEhERERERERERj1NSSkREREREREREPE5JKRERERERERER8TglpURERERERERExOOUlBIREREREREREY9TUkpERERERERERDzu/wGJPE01Tg/IvAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Conclusión\n",
        "\n",
        "Este modelo de red neuronal nos fue muy útil para poder hacer la clasificación de tipos de estrellas en función de características como la temperatura, luminosidad, radio y magnitud absoluta. Tuvo un accuracy score de 0.9791, por lo cual se puede decir que nuestro modelo tuvo una buena exactitud y su rendimiento fue bueno, pues demuestra una capacidad sobresaliente para predecir correctamente los tipos de estrellas, lo que lo vuelve efectivo para problemas de clasificación así como este.\n",
        "\n",
        "Gracias a su accuracy score, se puede decir que el modelo clasifica los tipos de estrella correctamente en casi el 98% de las veces, lo cual significa que tiene un buen desempeño y que es de utilidad. Además, el uso de la normalización mediante 'StandardScaler' ayuda al modelo a entrenarse mejor al asegurar que las características tengan una escala uniforme, lo que ayuda a mejorar el rendimiento de los modelos de redes neuronales. En este caso se hizo uso de configuraciones con capas densas, y la activación 'relu' permite que el modelo capture relaciones no lineales entre las características y el tipo de estrella, lo que mejora la capacidad predictiva. Además el modelo tiene buena generalización, lo que ayuda a que realmente sea un modelo útil."
      ],
      "metadata": {
        "id": "J1XKFAtkoFMh"
      }
    }
  ]
}
